{"version":3,"sources":["coponents/Input/Input.js","coponents/Button/Button.js","containers/Verify/Verify.js","containers/Login/Login.js","App.js","serviceWorker.js","index.js","coponents/Input/Input.module.css","coponents/Button/Button.module.css","containers/Verify/Verify.module.css","containers/Login/Login.module.css"],"names":["input","props","react_default","a","createElement","className","classes","placedholder","placeholder","onChange","changed","button","onClick","clicked","children","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Component","Login","state","phone","inputChanged","event","_this","setState","target","value","login","signInWithPhoneNumber","then","confirmationResult","window","console","log","catch","error","_this2","this","container","Input","Button","App","containers_Login_Login","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"+MAYeA,EATD,SAACC,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQN,OACpBE,EAAAC,EAAAC,cAAA,SACIG,aAAcN,EAAMO,YACpBC,SAAUR,EAAMS,6BCAjBC,EALA,SAACV,GACZ,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAQK,OAAQC,QAASX,EAAMY,SAAUZ,EAAMa,2CCU1EC,gBARa,CACTC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,iBAGFC,iCCqBNC,6MA7BXC,MAAQ,CACJC,MAAO,MAKXC,aAAe,SAACC,GACZC,EAAKC,SAAS,CAACJ,MAAOE,EAAMG,OAAOC,WAEvCC,MAAQ,WACJjB,SAAgBkB,sBAAsBL,EAAKJ,MAAMC,OAC5CS,KAAK,SAAAC,GACFC,OAAOD,mBAAqBA,EAC5BE,QAAQC,IAAI,kBAEfC,MAAM,SAAAC,GACHH,QAAQC,IAAI,+FAIf,IAAAG,EAAAC,KACL,OACIxC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQqC,WACpBzC,EAAAC,EAAAC,cAACwC,EAAD,CAAOpC,YAAY,cAAcE,QAAS,SAACiB,GAAD,OAAWc,EAAKf,aAAaC,MACvEzB,EAAAC,EAAAC,cAACyC,EAAD,CAAQhC,QAAS6B,KAAKV,OAAtB,iBAzBIV,aCSLwB,mLARX,OACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2C,EAAD,cAJUzB,aCME0B,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC,mCElInBC,EAAAC,QAAA,CAAkB/D,MAAA,0CCAlB8D,EAAAC,QAAA,CAAkBpD,OAAA,4CCAlBmD,EAAAC,QAAA,CAAkBpB,UAAA,+CCAlBmB,EAAAC,QAAA,CAAkBpB,UAAA","file":"static/js/main.fc770fcd.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    return (\r\n        <div className={classes.input}>\r\n            <input \r\n                placedholder={props.placeholder} \r\n                onChange={props.changed}/>\r\n        </div>\r\n    );\r\n};\r\nexport default input;","import React from 'react';\r\n\r\nimport classes from './Button.module.css';\r\nconst button = (props) => {\r\n    return (\r\n        <button className={classes.button} onClick={props.clicked}>{props.children}</button>\r\n    );\r\n}\r\nexport default button;","import React, {Component} from 'react';\r\nimport Input from '../../coponents/Input/Input';\r\nimport Button from '../../coponents/Button/Button';\r\nimport classes from './Verify.module.css';\r\nimport * as firebase from 'firebase';\r\nimport * as firebaseui from 'firebaseui';\r\n\r\nlet config = {\r\n    apiKey: \"AIzaSyClZ9edKf61yCJuSJCmg54jxs2hf_ipnw4\",\r\n    authDomain: \"verification-e6813.firebaseapp.com\",\r\n    databaseURL: \"https://verification-e6813.firebaseio.com\",\r\n    projectId: \"verification-e6813\",\r\n    storageBucket: \"verification-e6813.appspot.com\",\r\n    messagingSenderId: \"378135429479\"\r\n  };\r\nfirebase.initializeApp(config);\r\nclass Verify extends Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.container}>\r\n                <Input placeholder=\"Enter Code\" />\r\n                <Button>Submit</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Verify;","import React, {Component} from 'react';\r\nimport Input from '../../coponents/Input/Input';\r\nimport Button from '../../coponents/Button/Button';\r\nimport classes from './Login.module.css';\r\nimport * as firebase from 'firebase';\r\n\r\n\r\nclass Login extends Component{\r\n    state = {\r\n        phone: \"\"\r\n    }\r\n\r\n    \r\n\r\n    inputChanged = (event) => {\r\n        this.setState({phone: event.target.value});\r\n    }\r\n    login = () => {\r\n        firebase.auth().signInWithPhoneNumber(this.state.phone)\r\n            .then(confirmationResult => {\r\n                window.confirmationResult = confirmationResult;\r\n                console.log('message sent');\r\n            })\r\n            .catch(error => {\r\n                console.log('message not sent');\r\n            })\r\n    \r\n    }\r\n    render() {\r\n        return (\r\n            <div className={classes.container}>\r\n                <Input placeholder=\"Enter phone\" changed={(event) => this.inputChanged(event)} />\r\n                <Button clicked={this.login}>Login</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Login","import React, { Component } from 'react';\nimport './App.css';\n\nimport Verify from './containers/Verify/Verify';\nimport Login from './containers/Login/Login';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Login />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__-yOfM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Be-l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Verify_container__IFdAs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__1qNJd\"};"],"sourceRoot":""}